from libqtile import bar, widget
from libqtile.config import Key, Group, Drag, Click, ScratchPad, DropDown, Match
from libqtile.lazy import lazy
from libqtile.command import lazy

mod = "mod4"

keys = [
    # Atalhos para executar aplicativos
    Key([mod], "m", lazy.spawn("env LUTRIS_SKIP_INIT=1 lutris lutris:rungameid/2")),
    Key([mod], "v", lazy.spawn("steam steam://rungameid/438100")),
    Key([mod], "7", lazy.spawn("steam steam://rungameid/251570")),
    Key([mod], "g", lazy.spawn("env LUTRIS_SKIP_INIT=1 lutris lutris:rungameid/1")),
    Key([mod], "s", lazy.spawn("steam")),
    Key([mod], "l", lazy.spawn("lutris")),
    Key([mod], "b", lazy.spawn("steam steam://rungameid/365670")),

    # Música
    Key([mod], "q", lazy.spawn("playerctl pause")),
    Key([mod], "r", lazy.spawn("playerctl play")),
    Key([mod], "a", lazy.spawn("playerctl next")),
    Key([mod], "z", lazy.spawn("playerctl previous")),
    Key([mod], "Tab", lazy.spawn("pactl set-source-mute alsa_input.pci-0000_05_00.6.analog-stereo 1")),
    Key([mod, "shift"], "F2", lazy.spawn("pactl set-source-mute alsa_input.pci-0000_05_00.6.analog-stereo 0")),

    # Teclas para desligar ou reiniciar
    Key([mod, "shift"], "p", lazy.spawn("sudo poweroff")),
    Key([mod, "shift"], "o", lazy.spawn("sudo reboot")),

    # Controle de volume com notificações
    Key([mod], "F1", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ +3% && notify-send 'Volume' $(pactl list sinks | grep 'Volume:' | head -n 1 | awk '{print $5}')")),
    Key([mod], "F3", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ -3% && notify-send 'Volume' $(pactl list sinks | grep 'Volume:' | head -n 1 | awk '{print $5}')")),
]

groups = [Group(i) for i in "123456789"]

for i in groups:
    keys.extend([
        # mod1 + letter of group = switch to group
        Key([mod], i.name, lazy.group[i.name].toscreen()),
        # mod1 + shift + letter of group = switch to & move focused window to group
        Key([mod, "shift"], i.name, lazy.window.togroup(i.name)),
    ])

layout_theme = {"border_width": 0}

layouts = [
    layout.Max(**layout_theme),
]

widget_defaults = dict(
    font='DejaVu Sans Mono',
    fontsize=9,
    padding=3,
)

screens = [
    Screen(
        top=bar.Bar(
            [
                widget.GroupBox(),
                widget.Prompt(),
                widget.WindowName(),
                widget.TextBox("default config", name="default"),
                widget.Systray(),
                widget.Clock(format='%Y-%m-%d %a %I:%M %p'),
                widget.QuickExit(),
            ],
            24,
        ),
    ),
]

# Iniciar apagando
@hook.subscribe.startup_once
def start_once():
    home = os.path.expanduser('~')
    subprocess.call([home + '/.config/qtile/autostart.sh'])

# Programas para iniciar no boot
autostart = [
    "vivaldi",
    "dunst",
]

for x in autostart:
    os.system(x)
